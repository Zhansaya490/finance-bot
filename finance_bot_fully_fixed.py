
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone
import json
import os
import pandas as pd

TOKEN = "8174580404:AAEP0SgZWgEcBlIOx8n_d02T8ei38oe0JRI"
DATA_FILE = "user_data.json"
CONFIG, LOG, LIMIT = range(3)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def start(update, context):
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

def help_command(update, context):
    update.message.reply_text(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/config ‚Äî –∑–∞–¥–∞—Ç—å –¥–æ—Ö–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/log ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/summary ‚Äî —Ñ–∏–Ω.—Å–≤–æ–¥–∫–∞\n"
        "/categorysummary ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel\n"
        "/setlimit ‚Äî –∑–∞–¥–∞—Ç—å –ª–∏–º–∏—Ç\n"
        "/notifyon ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/notifyoff ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )

def config(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: –¥–æ—Ö–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ü—Ä–∏–º–µ—Ä: 200000, –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —É—á—ë–±–∞")
    return CONFIG

def save_config(update, context):
    user_id = str(update.message.from_user.id)
    parts = update.message.text.split(",")
    if len(parts) < 2:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return CONFIG
    income = int(parts[0].strip())
    categories = [x.strip() for x in parts[1:]]
    data = load_data()
    data[user_id] = {
        "income": income,
        "categories": categories,
        "logs": [],
        "notify": False,
        "limits": {}
    }
    save_data(data)
    update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    return ConversationHandler.END

def log(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞\n–ü—Ä–∏–º–µ—Ä: —Ä–∞—Å—Ö–æ–¥, –µ–¥–∞, 5000")
    return LOG

def save_log(update, context):
    user_id = str(update.message.from_user.id)
    parts = update.message.text.split(",")
    if len(parts) != 3:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return LOG
    entry_type, category, amount = [x.strip() for x in parts]
    amount = int(amount)

    data = load_data()
    if user_id not in data:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /config")
        return ConversationHandler.END
    data[user_id]["logs"].append({
        "type": entry_type,
        "category": category,
        "amount": amount
    })
    save_data(data)

    if entry_type == "—Ä–∞—Å—Ö–æ–¥":
        spent = sum(l["amount"] for l in data[user_id]["logs"]
                    if l["type"] == "—Ä–∞—Å—Ö–æ–¥" and l["category"] == category)
        limit = data[user_id].get("limits", {}).get(category)
        if limit and spent > limit:
            update.message.reply_text(
                f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ '{category}': {spent}‚Ç∏ (–ª–∏–º–∏—Ç: {limit}‚Ç∏)")

    update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

def summary(update, context):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id not in data:
        update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ /config.")
        return
    total_income = data[user_id]["income"]
    expenses = sum(log["amount"] for log in data[user_id]["logs"] if log["type"] == "—Ä–∞—Å—Ö–æ–¥")
    balance = total_income - expenses
    update.message.reply_text(f"üí∞ –î–æ—Ö–æ–¥: {total_income}‚Ç∏\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses}‚Ç∏\nüìä –ë–∞–ª–∞–Ω—Å: {balance}‚Ç∏")

def category_summary(update, context):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id not in data or not data[user_id]["logs"]:
        update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    summary = {}
    for log in data[user_id]["logs"]:
        if log["type"] == "—Ä–∞—Å—Ö–æ–¥":
            summary[log["category"]] = summary.get(log["category"], 0) + log["amount"]
    msg = "\n".join([f"üîπ {k}: {v}‚Ç∏" for k, v in summary.items()])
    update.message.reply_text(f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{msg}")

def export_data(update, context):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id not in data or not data[user_id]["logs"]:
        update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    df = pd.DataFrame(data[user_id]["logs"])
    filename = f"{user_id}_finance_export.xlsx"
    df.to_excel(filename, index=False)
    update.message.reply_document(open(filename, "rb"))

def set_limit(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç: –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞\n–ü—Ä–∏–º–µ—Ä: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, 10000")
    return LIMIT

def save_limit(update, context):
    user_id = str(update.message.from_user.id)
    parts = update.message.text.split(",")
    if len(parts) != 2:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return LIMIT
    category, limit = parts[0].strip(), int(parts[1])
    data = load_data()
    if "limits" not in data[user_id]:
        data[user_id]["limits"] = {}
    data[user_id]["limits"][category] = limit
    save_data(data)
    update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç {limit}‚Ç∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è '{category}'")
    return ConversationHandler.END

def notify_on(update, context):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id in data:
        data[user_id]["notify"] = True
        save_data(data)
        update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
    else:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /config")

def notify_off(update, context):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id in data:
        data[user_id]["notify"] = False
        save_data(data)
        update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

def send_notify(bot):
    data = load_data()
    for user_id, user_data in data.items():
        if user_data.get("notify"):
            income = user_data["income"]
            expenses = sum(log["amount"] for log in user_data["logs"] if log["type"] == "—Ä–∞—Å—Ö–æ–¥")
            balance = income - expenses
            bot.send_message(chat_id=int(user_id),
                             text=f"üì¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞:\nüí∞ –î–æ—Ö–æ–¥: {income}‚Ç∏\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses}‚Ç∏\nüìä –ë–∞–ª–∞–Ω—Å: {balance}‚Ç∏")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("summary", summary))
    dp.add_handler(CommandHandler("categorysummary", category_summary))
    dp.add_handler(CommandHandler("export", export_data))
    dp.add_handler(CommandHandler("notifyon", notify_on))
    dp.add_handler(CommandHandler("notifyoff", notify_off))
    dp.add_handler(CommandHandler("setlimit", set_limit))

    dp.add_handler(ConversationHandler(
        entry_points=[CommandHandler("config", config)],
        states={CONFIG: [MessageHandler(Filters.text & ~Filters.command, save_config)]},
        fallbacks=[]
    ))
    dp.add_handler(ConversationHandler(
        entry_points=[CommandHandler("log", log)],
        states={LOG: [MessageHandler(Filters.text & ~Filters.command, save_log)]},
        fallbacks=[]
    ))
    dp.add_handler(ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('.*'), set_limit)],
        states={LIMIT: [MessageHandler(Filters.text & ~Filters.command, save_limit)]},
        fallbacks=[]
    ))

    scheduler = BackgroundScheduler(timezone=timezone("Asia/Almaty"))
    scheduler.add_job(lambda: send_notify(updater.bot), 'cron', day_of_week='sun', hour=10, minute=0)
    scheduler.add_job(lambda: send_notify(updater.bot), 'cron', hour=19, minute=32)
    scheduler.start()

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
